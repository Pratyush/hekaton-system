

# This file was *autogenerated* from the file scalar_field.sage
from sage.all_cmdline import *   # import sage library

_sage_const_52435875175126190479447740508185965837690552500527637822603658699938581184513 = Integer(52435875175126190479447740508185965837690552500527637822603658699938581184513); _sage_const_0 = Integer(0); _sage_const_23 = Integer(23); _sage_const_7 = Integer(7); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
modulus = _sage_const_52435875175126190479447740508185965837690552500527637822603658699938581184513 

assert(modulus.is_prime())

Fp = GF(modulus)

generator = Fp(_sage_const_0 );
for i in range(_sage_const_0 , _sage_const_23 ):
    i = Fp(i);
    neg_i = Fp(-i)
    if not(i.is_primitive_root() or neg_i.is_primitive_root()):
        continue
    elif i.is_primitive_root():
        assert(i.is_primitive_root());
        print("Generator: %d" % i)
        generator = i
        break
    else:
        assert(neg_i.is_primitive_root());
        print("Generator: %d" % neg_i)
        generator = neg_i
        break

assert(generator == Fp(_sage_const_7 ))

two_adicity = valuation(modulus - _sage_const_1 , _sage_const_2 );
trace = (modulus - _sage_const_1 ) / _sage_const_2 **two_adicity;
two_adic_root_of_unity = generator**trace
print("2-adic Root of Unity: %d " % two_adic_root_of_unity)

